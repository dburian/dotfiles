#!/bin/sh

some_func() {
  echo 'calling some func'
  return
}

activate_virtual_environment() {
  #
  # Activates python virtual environment stored in ~/.local/share/python-venvs/
  #

  activate_path="/home/dburian/.local/share/python-venvs/$1/bin/activate"

  [ ! -e "$activate_path" ] && echo "Environment \"$1\" was not found." && return 1

  source $activate_path
  return 0
}

tmux() {
  #
  # Wraps tmux
  #

  # If called with args, continue straight to tmux
  if [[ -n "$@" ]]; then
    command tmux "$@"
    return
  fi

  # If there is a .tmux file, run it
  if [ -x .tmux ]; then
    ./.tmux "$@"
    return
  fi


  local session_name=$(basename $(pwd))
  command tmux new-session -A -s "$session_name"
}

locate() {
  #
  # My go to command for searching my filesystem.
  #

  blacklist="$XDG_CONFIG_HOME/locate/blacklist"

  sel=$(find . 2>/dev/null | grep -v -f "$blacklist" | fzf)

  if [ -z "$sel" ] ; then
    return
  fi
  if [ -d "$sel" ] ; then
    cd $sel
    return
  fi

  dir=$(dirname "$sel")
  export file=$(basename "$sel")
  cd "$dir"
}

locate-edit() {
  #
  # Find and edit files
  #
  blacklist="$XDG_CONFIG_HOME/locate/blacklist"

  sel=$(find . 2>/dev/null | grep -v -f "$blacklist" | fzf)

  if [ -z "$sel" ] ; then
    return
  fi
  if [ -d "$sel" ] ; then
    cd $sel
    return
  fi

  ext="${sel##*.}"
  dir=$(dirname $sel)
  base=$(basename $sel)

  if [ $ext = 'tmux' -a -x $sel ] ; then
    cd $dir
    ./$base
    return
  fi
  if [ $ext = 'jpg' -o $ext = 'jpeg' -o $ext = 'png' ] ; then
    feh "$sel"
    return
  fi
  if [ $ext = 'pdf' ] ; then
    z "$sel"
    return
  fi

  nvim "$sel"
}

activate-nvm() {
  #
  # Loads nvm, node, npm and all other node-based programs.
  #
  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
}

activate-conda() {
  eval "$(/home/dburian/.cache/miniconda3/bin/conda shell.zsh hook)"
}

install-jupyter_ascending() {

  if [ -z "$VIRTUAL_ENV" ] ; then
    echo "Attempting to install jupyter_ascending without virtual environment. Aborting..."
    return 1
  fi

  pip install jupyter_ascending && \
  jupyter nbextension    install jupyter_ascending --sys-prefix --py && \
  jupyter nbextension     enable jupyter_ascending --sys-prefix --py && \
  jupyter serverextension enable jupyter_ascending --sys-prefix --py
}

create-notebook() {
  #
  # Creates pair of files, synced up with jupyter_ascending.
  #

  python -m jupyter_ascending.scripts.make_pair --base "$1"
}
